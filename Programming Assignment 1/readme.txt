***********************************************************README************************************************
MATLAB was used as the programming language of choice, and no tools or built-in functions outside of the ones
already present in the standard issue were used. 
The following functions were written to solve programming assignment 1. 

RP2F.m

This function transforms a rotation and translation matrix into a frame transformation. 

Inputs: This function accepts a 3x3 rotation matrix 'R' and a 3x1 translation matrix 'p'.
Output: it produces a frame transformation 'F'.


F2RP.m

This function changes a frame transformation into a rotation and translation matrix. 

Input: This function accepts a 4x4 frame transformation 'F'
Outputs: It produces a 3x3 rotation matrix 'R' and a 3x1 translation matrix 'p'


pointSetRegistration.m 

This function accepts two 3D point clouds, and performs a 3D point cloud registration on them, producing a rotation 
and a translation matrix. 

Inputs: This function accepts 2 3D point clouds 'a' and 'b', and the number of points in each cloud 'N'
Outputs: It produces a rotation matrix 'R' and translation vector 'p' corresponding to the cloud transformation. 


pivotPointCalibration.m

This function performs a pivot point calibration on a tool with multiple trackers fitted on it, which are moved 
through multiple frames. 

Inputs: This function accepts a 3D point cloud 'a', the number of trackers on the tool 'na', and the number of 
frames the tool is moved through 'nf'.
Output: It produces a single 3D point 'pt' which is the pivot point. 


calibrationDataSet.m

this function takes a distortion calibration set and produces expected values for the position of the markers 
on the calibration body w.r.t. the EM tracker.

Inputs: This function accepts the file paths for the calibration readings for the body and EM tracker w.r.t. 
themselves 'calbody', and readings for the body w.r.t the EM tracker and optical tracker 'calreadings'. 
Outputs: It produces an expected value for Ci 'Ci', and the points for the trackers placed on the EM tracker 'dd', 
which is to be used in other functions.  


empivot.m

this function takes in an EM calibration text file containing coordinates for all EM trackers on the probe in 
multiple frames, and produces a pivot point calibration to get the position of the tip of the probe.

Input: This function accepts the file path 'empivot' for the EM calibration text file.
Output: It produces a pivot point 'p' for the EM tracker. 


OPTPivot.m

this function takes in an Optical calibration text file containing coordinates for all optical trackers on the 
probe in multiple frames, converts them to EM tracker coordinates, and produces a pivot point calibration to 
get the position of the tip of the probe.

Input: This function takes in the coordinates of the markers placed on the EM tracker w.r.t. the EM tracker 'dd',
and the file path 'optpivot' for the optical calibration text file. 
Output: It produces a pivot point 'pt' for the optical tracker. 


debugoutput.m

this function is used to read any output files if they exist, and return the position of the dimple w.r.t. the 
EM tracker, the optical tracker, and the expected values of the position of markers on the calibration object.

Input: This function accepts the file path for the output file 'output', if it exists. 
Outputs: It produces the coordinates for the pivot point w.r.t. EM tracker 'pem', w.r.t. the optical tracker
'popt', and the expected c values 'c'. 


write2file.m

This function produces an output file with the specified syntax. The first line is the number of points for c, 
the number of frames, and name of the file. The second line is the coordinates of the EM tracker point. The
third line is the coordinates of the optical tracker point. The rest of the file is the expected values for c, 
written frame by frame. 

Inputs: this function accepts the expected c values 'Ci', the number of EM markers on the calibration body 'nc', 
the number of frames 'nf', the coordinates of the pivot point w.r.t. EM Tracker 'pem', w.r.t. optical tracker
'popt', and the file name for the output file. 
Outputs: NULL


statisticalAnalysis.m

This is a function that produces a stastical analysis of the data generated by my code compared to the solution 
output files.

Inputs: this function accepts the expected c values given in the solution output file 'c_sol' and generated by
my code 'ci', the pivot point for the EM tracker given in the solution output file 'pem_sol' and generated by 
my code 'pem', the pivot point for the optical tracker given in the soluton output file 'popt_sol' and generated
by my code 'popt'
Outputs: It produces the magnitude of the maximum difference observed 'max_diff_c', the mean difference observed
'mean_diff_c', and the standard deviation 'stdev_diff_c' between the two expected values. It also produces the 
magnitude of the difference between the pivot point for EM tracker generated by the solution and my code, and the 
magnitude of the difference between the pivot point for optical tracker generated by the solution and my code.


Master_function.m

This is the master function to control all other functions. It calls the calibrationDataSet function to produce
the expected c values based on point cloud registration, then it calls the empivot and OPTPivot functions to 
produce pivot calibrations for the EM tracker and optical tracker. Then, you can call the debugoutput function
to read any output files that may be there. comment the function out if no output files are present. You call 
the write2file function to write any outputs you may have generated in the specified format. comment the function
out if you do not want to create a file. Finally, you can call the statisticalAnalysis function to perform any
analysis on the results you may have. Comment the function out if there is no output file that has been read. 

Input: NULL
Output: NULL
